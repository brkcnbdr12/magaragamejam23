diff a/Assets/scripts/Hareket.cs b/Assets/scripts/Hareket.cs	(rejected hunks)
@@ -1,37 +1,90 @@
 using System.Collections;
-using System.Collections.Generic;
 using UnityEngine;
 
-public class Hareket : MonoBehaviour
+public class PlayerMovement : MonoBehaviour
 {
-    public float hareketH�z� = 5f; 
-    public float Z�platmaPower = 10f; 
+    private float horizontal;
+    private float speed = 8f;
+    private float jumpingPower = 16f;
+    private bool isFacingRight = true;
 
-    public Transform groundCheck; 
-    public LayerMask groundLayer; 
+    private bool canDash = true;
+    private bool isDashing;
+    private float dashingPower = 24f;
+    private float dashingTime = 0.2f;
+    private float dashingCooldown = 1f;
 
-    private Rigidbody2D rb;
-    private bool isGrounded;
-    [SerializeField] private float groundCheck�ap = 0.2f;
+    [SerializeField] private Rigidbody2D rb;
+    [SerializeField] private Transform groundCheck;
+    [SerializeField] private LayerMask groundLayer;
+    [SerializeField] private TrailRenderer tr;
 
-    private void Start()
+    private void Update()
     {
-        rb = GetComponent<Rigidbody2D>();
+        if (isDashing)
+        {
+            return;
+        }
+
+        horizontal = Input.GetAxisRaw("Horizontal");
+
+        if (Input.GetButtonDown("Jump") && IsGrounded())
+        {
+            rb.velocity = new Vector2(rb.velocity.x, jumpingPower);
+        }
+
+        if (Input.GetButtonUp("Jump") && rb.velocity.y > 0f)
+        {
+            rb.velocity = new Vector2(rb.velocity.x, rb.velocity.y * 0.5f);
+        }
+
+        if (Input.GetKeyDown(KeyCode.LeftShift) && canDash)
+        {
+            StartCoroutine(Dash());
+        }
+
+        Flip();
     }
 
-    private void Update()
+    private void FixedUpdate()
     {
-        
-        isGrounded = Physics2D.OverlapCircle(groundCheck.position, groundCheck�ap, groundLayer);
+        if (isDashing)
+        {
+            return;
+        }
+
+        rb.velocity = new Vector2(horizontal * speed, rb.velocity.y);
+    }
 
-        
-        float moveInput = Input.GetAxis("Horizontal");
-        rb.velocity = new Vector2(moveInput * hareketH�z�, rb.velocity.y);
+    private bool IsGrounded()
+    {
+        return Physics2D.OverlapCircle(groundCheck.position, 0.2f, groundLayer);
+    }
 
-        
-        if (isGrounded && Input.GetButtonDown("Jump"))
+    private void Flip()
+    {
+        if (isFacingRight && horizontal < 0f || !isFacingRight && horizontal > 0f)
         {
-            rb.velocity = new Vector2(rb.velocity.x, Z�platmaPower);
+            Vector3 localScale = transform.localScale;
+            isFacingRight = !isFacingRight;
+            localScale.x *= -1f;
+            transform.localScale = localScale;
         }
     }
+
+    private IEnumerator Dash()
+    {
+        canDash = false;
+        isDashing = true;
+        float originalGravity = rb.gravityScale;
+        rb.gravityScale = 0f;
+        rb.velocity = new Vector2(transform.localScale.x * dashingPower, 0f);
+        tr.emitting = true;
+        yield return new WaitForSeconds(dashingTime);
+        tr.emitting = false;
+        rb.gravityScale = originalGravity;
+        isDashing = false;
+        yield return new WaitForSeconds(dashingCooldown);
+        canDash = true;
+    }
 }
\ No newline at end of file
